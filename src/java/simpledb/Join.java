package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

	private JoinPredicate p;
	private OpIterator childl;
	private OpIterator childr;
	private Tuple childl_join;
	private boolean childr_open;
	
    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
    	this.p = p;
    	this.childl = child1;
    	this.childr = child2;
   }

    public JoinPredicate getJoinPredicate() {
    	return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
    	int field1 = this.p.getField1();
    	TupleDesc childl_td = this.childl.getTupleDesc();
    	String field_name = childl_td.getFieldName(field1);
    	return field_name;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	return this.childr.getTupleDesc().getFieldName(this.p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
    	TupleDesc td1 = childl.getTupleDesc();
    	TupleDesc td2 = childr.getTupleDesc();
    	TupleDesc td_combine = TupleDesc.merge(td1, td2);
        return td_combine;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
    	super.open();
    	this.childl.open();
    }

    public void close() {
    	super.close();
    	this.childl.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	close();
    	open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if (this.childl_join == null && this.childl.hasNext()) {
    		this.childl_join = this.childl.next();
    	}
    	while (this.childl_join != null) {
    		if (!this.childr_open) {
    			this.childr.open();
    			this.childr_open = true;
    		}
			while(this.childr.hasNext()) {
				Tuple childr_tup = this.childr.next();
    			if (this.p.filter(this.childl_join, childr_tup)) {
    				Tuple combined_tup = merge_tuples(this.childl_join, childr_tup);
    				return combined_tup;
    			}
			}
			if (this.childl.hasNext()) {
				this.childl_join = this.childl.next();
				this.childr.rewind();
			} else {
				return null;
			}
    	}
		return null;
    }

    @Override
    public OpIterator[] getChildren() {
    	return new OpIterator[] {this.childl, this.childr};
    }

    @Override
    public void setChildren(OpIterator[] children) {
    	this.childl = children[0];
    	this.childr = children[1];
    }
    
    private Iterator<Tuple> getJoinTuples(OpIterator child1, OpIterator child2) throws DbException, TransactionAbortedException {
    	ArrayList<Tuple> join_tuples = new ArrayList<Tuple>();
    	child1.rewind();
    	while(child1.hasNext()) {
    		Tuple childl_tup = child1.next();
    		child2.rewind();
    		while(child2.hasNext()) {
    			Tuple childr_tup = child2.next();
    			if (this.p.filter(childl_tup, childr_tup)) {
    				Tuple combined_tup = merge_tuples(childl_tup, childr_tup);
    				join_tuples.add(combined_tup);
    			}
    		}
    	}
    	return join_tuples.iterator();
    }
    
    private Tuple merge_tuples(Tuple t1, Tuple t2) {
    	TupleDesc td1 = t1.getTupleDesc();
    	TupleDesc td2 = t2.getTupleDesc();
    	TupleDesc tdc = TupleDesc.merge(td1, td2);
    	Tuple tc = new Tuple(tdc);
    	for (int i=0;i<td1.numFields();i++) {
    		tc.setField(i, t1.getField(i));
    	}
    	for (int j=0;j<td2.numFields();j++) {
    		int fieldNum = j + td1.numFields();
    		tc.setField(fieldNum, t2.getField(j));
    	}
    	return tc;
    }

}
